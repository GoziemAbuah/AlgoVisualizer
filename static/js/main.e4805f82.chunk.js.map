{"version":3,"sources":["sortAlgos/sortAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","aux_Array","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","SortingVisualizer","props","state","sorted","solving","this","resetArray","len","document","getElementById","value","min","max","random","setState","arrayBars","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","input","start","end","a","partitionI","pivot","sleep","id","swap","arr","x","y","temp","bars","partition","new_index","quickSort","width","type","className","defaultValue","onClick","mergeSort","sort","map","idx","React","Component","ms","Promise","resolve","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e4805f82.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const aux_Array = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, aux_Array, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    aux_Array,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(aux_Array, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(aux_Array, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, aux_Array, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    aux_Array,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      //change color of the compared items \r\n      animations.push([i, j]);\r\n      // revert their color after comparison \r\n      animations.push([i, j]);\r\n      if (aux_Array[i] <= aux_Array[j]) {\r\n        // change value at k index to corresponding value in the aux \r\n        animations.push([k, aux_Array[i]]);\r\n        mainArray[k++] = aux_Array[i++];\r\n      } else {\r\n       \r\n        animations.push([k, aux_Array[j]]);\r\n        mainArray[k++] = aux_Array[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      \r\n      animations.push([i, i]);\r\n      \r\n      animations.push([i, i]);\r\n      \r\n      animations.push([k, aux_Array[i]]);\r\n      mainArray[k++] = aux_Array[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      \r\n      animations.push([j, j]);\r\n      \r\n      animations.push([j, j]);\r\n      \r\n      animations.push([k, aux_Array[j]]);\r\n      mainArray[k++] = aux_Array[j++];\r\n    } \r\n}\r\n","import React from 'react';\r\nimport {getMergeSortAnimations} from '../sortAlgos/sortAlgorithms.js';\r\nimport './SortingVisualizer.css';\r\n\r\nconst ANIMATE_SPEED = 3; \r\nconst COMPARISON_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            sorted: true,\r\n            solving: false\r\n\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray(){\r\n        if (this.state.solving===false){\r\n        const array = [];\r\n        let len = document.getElementById(\"myRange\").value;\r\n        for(let i = 0; i < len; i++){\r\n            array.push(randomIntFromInterval(5, 700));\r\n        }\r\n        this.setState({array});\r\n        let sorted = false;\r\n        this.setState({sorted})\r\n    }}\r\n\r\n    mergeSort() {\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const color_swap = i % 3 !== 2;\r\n      if (color_swap) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? COMPARISON_COLOR : 'turquoise';\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATE_SPEED); //scale the speed of animation by index \r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATE_SPEED);\r\n      }\r\n    }\r\n    }\r\n\r\n    async partition(input,start,end){\r\n  \r\n        let partitionI = start;\r\n        let pivot = input[end];\r\n        await sleep(10)\r\n        //document.getElementById(end).id = \"green\";\r\n      // document.getElementById(partitionI).id = \"red\"\r\n        for (let i = start; i < end ; i++){\r\n            if (input[i] < pivot){\r\n                if (document.getElementById(i)){\r\n                document.getElementById(i).id = \"red\";}\r\n                \r\n                await this.swap(input,partitionI,i)\r\n                \r\n                if (document.getElementById(\"red\")){\r\n                document.getElementById(\"red\").id = i;}\r\n    \r\n                if(document.getElementById(\"blue\")){\r\n                document.getElementById(\"blue\").id = partitionI;}\r\n                partitionI++\r\n                \r\n                if (document.getElementById(partitionI)){\r\n                document.getElementById(partitionI).id = \"blue\";}\r\n            }\r\n        }\r\n        await this.swap(input,partitionI,end);\r\n    // document.getElementById(\"green\").id = end\r\n        if(document.getElementById(\"blue\")){\r\n            document.getElementById(\"blue\").id = partitionI;}\r\n        return partitionI\r\n    }\r\n\r\n    async swap(arr,x,y){\r\n        await sleep(3);\r\n        let temp = arr[x];\r\n        arr[x] = arr[y];\r\n        arr[y] = temp;\r\n        this.setState({bars:arr})\r\n    }\r\n\r\n\r\n   async quickSort(input, start, end) {\r\n        if (end <= start){\r\n            return;\r\n        }\r\n        await sleep(10)\r\n        let new_index =  await this.partition(input, start, end);\r\n        this.setState({array:input})\r\n        await sleep(10)\r\n        await this.quickSort(input,start,new_index-1);\r\n        this.setState({array:input})\r\n        await sleep(10)\r\n        await this.quickSort(input,new_index+1,end);\r\n        this.setState({array:input})\r\n       \r\n\r\n    }\r\n\r\n    async sort(){\r\n        if (!this.state.solving && !this.state.sorted){\r\n         this.setState({solving:true})\r\n        await this.quickSort(this.state.array, 0, this.state.array.length-1);\r\n        this.setState({sorted:true})\r\n        this.setState({solving:false})\r\n        }\r\n        \r\n           \r\n    }\r\n\r\n   \r\n    render(){\r\n        const {array} = this.state;\r\n        let width;\r\n        if(array.length > 120){\r\n            width = 1;\r\n        }else if(array.length > 100){\r\n            width = 1.75;\r\n        }else if(array.length > 50){\r\n            width= 3;\r\n        }else if(array.length > 20){\r\n            width = 10;\r\n        }else if(array.length > 10){\r\n            width= 50;\r\n        }else {\r\n            width = 80;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n             <nav>\r\n        Sorting Algorithm Visualizer\r\n        <input type=\"range\" min=\"10\" max=\"200\" className=\"slider\" id=\"myRange\" defaultValue=\"100\" onClick={()=>this.resetArray()}></input>\r\n        <button onClick= {() => this.resetArray()}>Create New Array</button>\r\n        <button onClick= {() => this.mergeSort()}>Merge Sort</button>\r\n        <button onClick= {() => this.sort()}>quick sort</button>\r\n        </nav>\r\n        <span className=\"divide\"></span>\r\n            <div className= \"array-container\">\r\n            {array.map((value, idx) => (\r\n                <div className= \"array-bar\" key={idx} \r\n                style={{height: `${value}px`, width: `${width}px`}}>\r\n                    \r\n                </div>\r\n            ))}\r\n            </div>\r\n            \r\n           \r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n// helpers (lol)\r\n\r\nfunction randomIntFromInterval(min, max){\r\n    return Math.floor(Math.random() * (max-min+1) + min);\r\n} \r\n\r\nfunction sleep(ms){\r\n    return new Promise(resolve => setTimeout(resolve,ms));\r\n}\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer'\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}